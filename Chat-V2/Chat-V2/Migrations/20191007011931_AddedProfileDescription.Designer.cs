// <auto-generated />
using System;
using Chat_V2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chat_V2.Migrations
{
    [DbContext(typeof(ChatContext))]
    [Migration("20191007011931_AddedProfileDescription")]
    partial class AddedProfileDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chat_V2.Areas.Identity.Data.ChatRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Chat_V2.Areas.Identity.Data.ChatUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int?>("GroupID");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("NumOnline");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileDescription");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GroupID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Chat_V2.Models.ChatMessage", b =>
                {
                    b.Property<int>("ChatMessageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatUserID");

                    b.Property<int>("ChatUserRank");

                    b.Property<int>("GroupID");

                    b.Property<string>("Message");

                    b.Property<int>("MinRank");

                    b.Property<int>("StatusType");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("ChatMessageID");

                    b.HasIndex("ChatUserID");

                    b.HasIndex("GroupID");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("Chat_V2.Models.Group", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Name");

                    b.HasKey("GroupID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Chat_V2.Models.GroupJoinInvitation", b =>
                {
                    b.Property<int>("GroupJoinInvitationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatUserID");

                    b.Property<DateTime>("DateSent");

                    b.Property<int>("GroupID");

                    b.Property<string>("Message");

                    b.HasKey("GroupJoinInvitationID");

                    b.HasIndex("ChatUserID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupJoinInvitation");
                });

            modelBuilder.Entity("Chat_V2.Models.GroupJoinRequest", b =>
                {
                    b.Property<int>("GroupJoinRequestID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatUserID");

                    b.Property<DateTime>("DateSent");

                    b.Property<int>("GroupID");

                    b.Property<string>("Message");

                    b.HasKey("GroupJoinRequestID");

                    b.HasIndex("ChatUserID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupJoinRequest");
                });

            modelBuilder.Entity("Chat_V2.Models.Membership", b =>
                {
                    b.Property<int>("MembershipID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatUserID");

                    b.Property<int>("GroupID");

                    b.Property<bool>("IsActiveInGroup");

                    b.Property<bool>("IsOnlineInGroup");

                    b.Property<int>("Rank");

                    b.HasKey("MembershipID");

                    b.HasIndex("ChatUserID");

                    b.HasIndex("GroupID");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("Chat_V2.Models.MembershipStatus", b =>
                {
                    b.Property<int>("MembershipID");

                    b.Property<DateTime>("DateIssued");

                    b.Property<DateTime>("Expiration");

                    b.Property<int>("Type");

                    b.HasKey("MembershipID");

                    b.ToTable("MembershipStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Chat_V2.Areas.Identity.Data.ChatUser", b =>
                {
                    b.HasOne("Chat_V2.Models.Group")
                        .WithMany("BannedUsers")
                        .HasForeignKey("GroupID");
                });

            modelBuilder.Entity("Chat_V2.Models.ChatMessage", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatUser", "ChatUser")
                        .WithMany()
                        .HasForeignKey("ChatUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Chat_V2.Models.Group", "Group")
                        .WithMany("ChatMessages")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Chat_V2.Models.GroupJoinInvitation", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatUser", "ChatUser")
                        .WithMany("GroupJoinInvitations")
                        .HasForeignKey("ChatUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Chat_V2.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Chat_V2.Models.GroupJoinRequest", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatUser", "ChatUser")
                        .WithMany()
                        .HasForeignKey("ChatUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Chat_V2.Models.Group", "Group")
                        .WithMany("GroupJoinRequests")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Chat_V2.Models.Membership", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatUser", "ChatUser")
                        .WithMany("Memberships")
                        .HasForeignKey("ChatUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Chat_V2.Models.Group", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Chat_V2.Models.MembershipStatus", b =>
                {
                    b.HasOne("Chat_V2.Models.Membership")
                        .WithOne("MembershipStatus")
                        .HasForeignKey("Chat_V2.Models.MembershipStatus", "MembershipID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Chat_V2.Areas.Identity.Data.ChatUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
