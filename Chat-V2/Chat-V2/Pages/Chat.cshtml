@page
@model Chat_V2.Pages.ChatModel
@{
    ViewData["Title"] = "Chat";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">
            <div id="messages-list" class="console-output">

            </div>

            <br />

            <input type="text" id="message-input" class="console-input" placeholder="Enter message here" />
        </div>

        <div class="col-1"></div>

        <div id="data-pane" class="col-5">
            <div id="command-output-list" class="console-output">

            </div>

            <br />

            <input type="text" id="command-input" class="console-input" placeholder="Enter commands here. Type 'help' for a list of commands." />

            <hr />

            <div id="info-pane" class="container">
                <div class="row" style="height: 100%;">
                    <div class="col-6">

                    </div>
                    <div class="col-6">
                        <div id="online-members-list">
                            <div class="user-data-container">
                                <div class="user-data-name">Sample User Name</div>
                                <div class="user-data-rank">&nbsp;&nbsp;&nbsp;&nbsp;Rank</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>

    .message {

    }

    .message-header {
        font-family: Consolas;
        font-size: medium;
    }

    .message-content {
        font-family: Consolas;
        font-size: small;
        color: #000000;
    }

    .user-data-container {
        display: block;
        width: 100%;
    }

    .user-data-container:hover {
        border: solid 1px #AAAAAA;
    }

    .user-data-name {
        width: 100%;
    }

    .user-data-rank {
        width: 100%;
    }

    /* The output area for the message terminal */
    #messages-list {
        height: 750px;
    }

    /* The input area for the message terminal */
    #message-input {

    }

    /* The output area for the command terminal */
    #command-output-list {
        height: 200px;
    }

    /* The input area for the command terminal */
    #command-input {
        
    }

    /* The panel containing the command terminal and info pane */
    #data-pane {
        border: solid 5px #00FFBB;
        border-radius: 4px 4px;
        width: 100%;
    }

    /* The panel containing group data */
    #info-pane {
        width: 100%;
    }

    /* The list of online group members */
    #online-members-list {
        overflow: scroll;
        width: 100%;
        height: 100%;
    }

</style>
<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script type="text/javascript">
    "use strict";

    //Get ViewModel data
    const viewmodel = {
        GroupID: '@Model.ViewModel.Membership.GroupID',
        UserID: '@Model.ViewModel.Membership.ChatUserID',
        Rank: '@Model.ViewModel.Membership.Rank'
    };

    function appendMessage(senderName, senderRankColor, message) {
        var head = "<" + senderName + ">: ";
        var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

        var container = document.createElement("div");
        container.setAttribute("class", "message");

        var header = document.createElement("span");
        header.setAttribute("class", "message-header");
        header.setAttribute("style", "color: #" + senderRankColor + ";");
        header.textContent = head;
        container.appendChild(header);

        var content = document.createElement("span");
        content.setAttribute("class", "message-content");
        content.setAttribute("style", "color: #" + senderRankColor + ";");
        content.textContent = msg;
        container.appendChild(content);

        var messagesList = document.getElementById("messages-list");

        messagesList.appendChild(container);
        messagesList.scrollTop = messagesList.scrollHeight;
    }

    function appendCommandMessage(color, message) {
        var head = "$ ";
        var msg = message;

        var container = document.createElement("div");
        container.setAttribute("class", "message");

        var header = document.createElement("span");
        header.setAttribute("class", "message-header");
        header.setAttribute("style", "color: #" + color + ";");
        header.textContent = head;
        container.appendChild(header);

        var content = document.createElement("span");
        content.setAttribute("class", "message-content");
        content.setAttribute("style", "color: #" + color + ";");
        content.textContent = msg;
        container.appendChild(content);

        var messagesList = document.getElementById("command-output-list");

        messagesList.appendChild(container);
        messagesList.scrollTop = messagesList.scrollHeight;
    }

    function userConnected(userId, userName, userRankName) {
        
    }

    function userDisconnected(userId) {
        document.getElementById("online-members-list")
            .removeChild(document.getElementById("user-" + userId));
    }

    //Start SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();
    
    //On connection established
    connection.start().then(function () {
        console.log("connected");

        var args = {
            GroupID: viewmodel.GroupID,
            SenderID: viewmodel.UserID
        };

        //Send the connection event
        connection.invoke("ClientConnected", args);

        //Load the last 50 messages
        connection.invoke("GetPreviousMessages", viewmodel.GroupID, viewmodel.Rank, 0, 50);
    }).catch(function (err) {
        return console.error(err.toString());
    });

    window.addEventListener('unload', (event) => {
        var args = {
            GroupID: viewmodel.GroupID,
            SenderID: viewmodel.UserID
        };

        //Send the disconnection event
        connection.invoke("ClientDisconnected", args);
    });

    connection.on("ReceivePreviousMessages", function (messages) {
        $.each(messages, function () {
            var args = this;
            appendMessage(args.senderName, args.senderRankColor, args.message);
        });
    });

    //Receive Message
	connection.on("ReceiveMessage", function (args) {
        appendMessage(args.senderName, args.senderRankColor, args.message);
    });

    //Send Message
    document.getElementById("message-input").addEventListener("keyup", function (event) {
        if (event.keyCode == 13) {
            var element = document.getElementById("message-input");
            var message = element.value;

            var args = {
                GroupID: viewmodel.GroupID,
                SenderID: viewmodel.UserID,
                SenderRank: viewmodel.Rank,
                MinRank: viewmodel.Rank,
                Message: message
            };
            connection.invoke("SendMessage", args).catch(function (err) {
                return console.error(err.toString());
            });

            element.value = "";

            event.preventDefault();
        }
    });

    //Receive Command-Related Message
    connection.on("ReceiveCommandMessage", function (args) {
        appendCommandMessage(args.color, args.message);
    });

    //Send Command
    document.getElementById("command-input").addEventListener("keyup", function (event) {
        if (event.keyCode == 13) {
            var element = document.getElementById("command-input");
            var text = element.value;

            var args = {
                GroupID: viewmodel.GroupID,
                SenderID: viewmodel.UserID,
                SenderRank: viewmodel.Rank,
                Text: text
            };
            connection.invoke("ProcessCommand", args).catch(function (err) {
                return console.error(err.toString());
            });

            element.value = "";

            event.preventDefault();
        }
    });

    connection.on("UserConnected", function (args) {
        if (args.userId != viewmodel.UserID) {
            userConnected(args.userId, args.userName, args.userRankName);
        }
    });

    connection.on("UserDisconnected", function (args) {
        userDisconnected(args.userId);
    });
</script>
