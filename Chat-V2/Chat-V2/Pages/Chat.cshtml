@page
@model Chat_V2.Pages.ChatModel
@{
    ViewData["Title"] = "Chat";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div id="messages-list" class="col-6" style="overflow-y: scroll; width: 100%; height: 200px;">

        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <input type="text" id="messageInput" width: 100%; />
        </div>
    </div>
</div>
<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script type="text/javascript">
    "use strict";

    //Get ViewModel data
    var viewmodel = {
        GroupID: '@Model.ViewModel.Membership.GroupID',
        UserID: '@Model.ViewModel.Membership.ChatUserID',
        Rank: '@Model.ViewModel.Membership.Rank'
    };

    function prependMessage(senderName, senderRankColor, message) {
        var head = "<" + senderName + ">: ";
        var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

        var container = document.createElement("div");
        container.setAttribute("class", "message");

        var header = document.createElement("span");
        header.setAttribute("class", "message-header");
        header.setAttribute("style", "color: #" + senderRankColor + ";");
        header.textContent = head;
        container.appendChild(header);

        var content = document.createElement("span");
        content.setAttribute("class", "message-content");
        content.setAttribute("style", "color: #" + senderRankColor + ";");
        content.textContent = msg;
        container.appendChild(content);
        
        document.getElementById("messages-list").appendChild(container);
    }

    function appendMessage(senderName, senderRankColor, message) {
        var head = "<" + senderName + ">: ";
        var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

        var container = document.createElement("div");
        container.setAttribute("class", "message");

        var header = document.createElement("span");
        header.setAttribute("class", "message-header");
        header.setAttribute("style", "color: #" + senderRankColor + ";");
        header.textContent = head;
        container.appendChild(header);

        var content = document.createElement("span");
        content.setAttribute("class", "message-content");
        content.setAttribute("style", "color: #" + senderRankColor + ";");
        content.textContent = msg;
        container.appendChild(content);
        
        document.getElementById("messages-list").appendChild(container);
    }

    //Start SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();
    
    //On connection established
    connection.start().then(function () {
        console.log("connected");

        //Load the last 50 messages
        connection.invoke("GetPreviousMessages", viewmodel.GroupID, viewmodel.Rank, 0, 50);
    }).catch(function (err) {
        return console.error(err.toString());
    });

    connection.on("ReceivePreviousMessages", function (messages) {
        $.each(messages, function () {
            var args = this;
            prependMessage(args.senderName, args.senderRankColor, args.message);
        });
    });

    //Receive Message
	connection.on("ReceiveMessage", function (args) {
        appendMessage(args.senderName, args.senderRankColor, args.message);
    });

    //Send Message
    document.getElementById("messageInput").addEventListener("keyup", function (event) {
        if (event.keyCode == 13) {
            var args = {
                GroupID: viewmodel.GroupID,
                SenderID: viewmodel.UserID,
                SenderRank: viewmodel.Rank,
                MinRank: viewmodel.Rank
            };

            var message = document.getElementById("messageInput").value;

            connection.invoke("SendMessage", args, message).catch(function (err) {
                return console.error(err.toString());
            });

            event.preventDefault();
        }
    });
</script>
