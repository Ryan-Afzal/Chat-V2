#pragma checksum "C:\Users\s-afzalr\Documents\GitHub\Chat-V2\Chat-V2\Chat-V2\Pages\Chat.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d43a549d2eff0dc57d97627158216aec9f1f4f15"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Chat_V2.Pages.Pages_Chat), @"mvc.1.0.razor-page", @"/Pages/Chat.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Chat.cshtml", typeof(Chat_V2.Pages.Pages_Chat), null)]
namespace Chat_V2.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\s-afzalr\Documents\GitHub\Chat-V2\Chat-V2\Chat-V2\Pages\_ViewImports.cshtml"
using Chat_V2;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d43a549d2eff0dc57d97627158216aec9f1f4f15", @"/Pages/Chat.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"54bebb9c9bbee8d51a45538557928179fb546f89", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Chat : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/signalr/dist/browser/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Users\s-afzalr\Documents\GitHub\Chat-V2\Chat-V2\Chat-V2\Pages\Chat.cshtml"
  
    ViewData["Title"] = "Chat";
    Layout = "~/Pages/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(126, 2560, true);
            WriteLiteral(@"
<div class=""container"">
    <div class=""row"">&nbsp;</div>
    <div class=""row"">
        <div class=""col-6"">
            <div id=""messages-list"" class=""console-output"">

            </div>

            <br />

            <input type=""text"" id=""message-input"" class=""console-input"" placeholder=""Enter message here"" />
        </div>

        <div class=""col-1""></div>

        <div id=""data-pane"" class=""col-5"">
            <div id=""command-output-list"" class=""console-output"">

            </div>

            <br />

            <input type=""text"" id=""command-input"" class=""console-input"" placeholder=""Enter commands here. Type 'help' for a list of commands."" />

            <hr />

            <div id=""info-pane"" class=""container"">
                <div class=""row"" style=""height: 100%;"">
                    <div class=""col-3"">

                    </div>
                    <div class=""col-9"">
                        <div id=""online-members-list"">

                        </div>
");
            WriteLiteral(@"                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>

    .message {

    }

    .message-header {
        font-family: Consolas;
        font-size: medium;
    }

    .message-content {
        font-family: Consolas;
        font-size: small;
        color: #000000;
    }

    .user-data-container {
        display: block;
        width: 100%;
    }

    .user-data-container:hover {
        border: solid 1px #AAAAAA;
    }

    .user-data-name {
        width: 100%;
    }

    .user-data-rank {
        width: 100%;
    }

    /* The output area for the message terminal */
    #messages-list {
        height: 750px;
    }

    /* The input area for the message terminal */
    #message-input {

    }

    /* The output area for the command terminal */
    #command-output-list {
        height: 200px;
    }

    /* The input area for the command terminal */
    #command-input {
        
    }

  ");
            WriteLiteral(@"  /* The panel containing the command terminal and info pane */
    #data-pane {
        border: solid 5px #00FFBB;
        border-radius: 10px 10px;
        width: 100%;
    }

    /* The panel containing group data */
    #info-pane {
        width: 100%;
    }

    /* The list of online group members */
    #online-members-list {
        overflow: scroll;
        width: 100%;
        height: 500px; /*this is the thing for the box that shows the users and their ranks*/
    }

</style>
");
            EndContext();
            BeginContext(2686, 61, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d43a549d2eff0dc57d97627158216aec9f1f4f156286", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2747, 125, true);
            WriteLiteral("\r\n<script type=\"text/javascript\">\r\n    \"use strict\";\r\n\r\n    //Get ViewModel data\r\n    const viewmodel = {\r\n        GroupID: \'");
            EndContext();
            BeginContext(2873, 34, false);
#line 129 "C:\Users\s-afzalr\Documents\GitHub\Chat-V2\Chat-V2\Chat-V2\Pages\Chat.cshtml"
             Write(Model.ViewModel.Membership.GroupID);

#line default
#line hidden
            EndContext();
            BeginContext(2907, 21, true);
            WriteLiteral("\',\r\n        UserID: \'");
            EndContext();
            BeginContext(2929, 37, false);
#line 130 "C:\Users\s-afzalr\Documents\GitHub\Chat-V2\Chat-V2\Chat-V2\Pages\Chat.cshtml"
            Write(Model.ViewModel.Membership.ChatUserID);

#line default
#line hidden
            EndContext();
            BeginContext(2966, 19, true);
            WriteLiteral("\',\r\n        Rank: \'");
            EndContext();
            BeginContext(2986, 31, false);
#line 131 "C:\Users\s-afzalr\Documents\GitHub\Chat-V2\Chat-V2\Chat-V2\Pages\Chat.cshtml"
          Write(Model.ViewModel.Membership.Rank);

#line default
#line hidden
            EndContext();
            BeginContext(3017, 8039, true);
            WriteLiteral(@"'
    };

    //The number of messages currently displayed. Used for getting previous messages.
    var numMessages = 0;

    function appendMessage(senderName, senderRankColor, message) {
        var head = ""<"" + senderName + "">: "";
        var msg = message.replace(/&/g, ""&amp;"").replace(/</g, ""&lt;"").replace(/>/g, ""&gt;"");

        var container = document.createElement(""div"");
        container.setAttribute(""class"", ""message"");

        var header = document.createElement(""span"");
        header.setAttribute(""class"", ""message-header"");
        header.setAttribute(""style"", ""color: #"" + senderRankColor + "";"");
        header.textContent = head;
        container.appendChild(header);

        var content = document.createElement(""span"");
        content.setAttribute(""class"", ""message-content"");
        content.setAttribute(""style"", ""color: #"" + senderRankColor + "";"");
        content.textContent = msg;
        container.appendChild(content);

        var messagesList = document.getEl");
            WriteLiteral(@"ementById(""messages-list"");

        messagesList.appendChild(container);
        messagesList.scrollTop = messagesList.scrollHeight;
    }

    function prependMessage(senderName, senderRankColor, message) {
        var head = ""<"" + senderName + "">: "";
        var msg = message.replace(/&/g, ""&amp;"").replace(/</g, ""&lt;"").replace(/>/g, ""&gt;"");

        var container = document.createElement(""div"");
        container.setAttribute(""class"", ""message"");

        var header = document.createElement(""span"");
        header.setAttribute(""class"", ""message-header"");
        header.setAttribute(""style"", ""color: #"" + senderRankColor + "";"");
        header.textContent = head;
        container.appendChild(header);

        var content = document.createElement(""span"");
        content.setAttribute(""class"", ""message-content"");
        content.setAttribute(""style"", ""color: #"" + senderRankColor + "";"");
        content.textContent = msg;
        container.appendChild(content);

        var messagesL");
            WriteLiteral(@"ist = document.getElementById(""messages-list"");

        messagesList.prepend(container);
    }

    function appendCommandMessage(color, message) {
        var head = ""$ "";
        var msg = message;

        var container = document.createElement(""div"");
        container.setAttribute(""class"", ""message"");

        var header = document.createElement(""span"");
        header.setAttribute(""class"", ""message-header"");
        header.setAttribute(""style"", ""color: #"" + color + "";"");
        header.textContent = head;
        container.appendChild(header);

        var content = document.createElement(""span"");
        content.setAttribute(""class"", ""message-content"");
        content.setAttribute(""style"", ""color: #"" + color + "";"");
        content.textContent = msg;
        container.appendChild(content);

        var messagesList = document.getElementById(""command-output-list"");

        messagesList.appendChild(container);
        messagesList.scrollTop = messagesList.scrollHeight;
    ");
            WriteLiteral(@"}

    function userConnected(userId, userName, userRankName) {
        var container = document.createElement(""div"");
        container.setAttribute(""id"", ""user-"" + userId);
        container.setAttribute(""class"", ""user-data-container"");

        var name = document.createElement(""div"");
        name.setAttribute(""class"", ""user-data-name"");
        name.textContent = userName;
        container.appendChild(name);

        var rank = document.createElement(""div"");
        rank.setAttribute(""class"", ""user-data-rank"");
        rank.textContent = ""    "" + userRankName;
        container.appendChild(rank);

        document.getElementById(""online-members-list"").appendChild(container);
    }

    function userDisconnected(userId) {
        document.getElementById(""online-members-list"")
            .removeChild(document.getElementById(""user-"" + userId));
    }

    //Start SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl(""/chatHub"")
        .c");
            WriteLiteral(@"onfigureLogging(signalR.LogLevel.Information)
        .build();
    
    //On connection established
    connection.start().then(function () {
        console.log(""connected"");

        var connectionArgs = {
            GroupID: viewmodel.GroupID,
            SenderID: viewmodel.UserID
        };

        //Send the connection event
        connection.invoke(""ClientConnected"", connectionArgs);

        //Load the last 50 messages
        connection.invoke(""GetPreviousMessages"", viewmodel.GroupID, viewmodel.Rank, 0, 50);
    }).catch(function (err) {
        return console.error(err.toString());
    });

    //On disconnect
    window.addEventListener('unload', (event) => {
        var args = {
            GroupID: viewmodel.GroupID,
            SenderID: viewmodel.UserID
        };

        //Send the disconnection event
        connection.invoke(""ClientDisconnected"", args);
    });

    //Receive Previous Messages
    connection.on(""ReceivePreviousMessages"", function (messag");
            WriteLiteral(@"es) {
        $.each(messages, function () {
            var args = this;
            prependMessage(args.senderName, args.senderRankColor, args.message);
            numMessages++;
        });
    });

    //Receive List of Connected Users
    connection.on(""ReceiveConnectedUsers"", function (users) {
        $.each(users, function () {
            var args = this;
            if (args.userID != parseInt(viewmodel.UserID)) {
                userConnected(args.userID, args.userName, args.userRankName);
            }
        });
    });

    //Receive Message
	connection.on(""ReceiveMessage"", function (args) {
        appendMessage(args.senderName, args.senderRankColor, args.message);
        numMessages++;

        //Put the sound here
    });

    //Send Message
    document.getElementById(""message-input"").addEventListener(""keyup"", function (event) {
        if (event.keyCode == 13) {
            var element = document.getElementById(""message-input"");
            var message = ele");
            WriteLiteral(@"ment.value;

            var args = {
                GroupID: viewmodel.GroupID,
                SenderID: viewmodel.UserID,
                SenderRank: viewmodel.Rank,
                MinRank: viewmodel.Rank,
                Message: message
            };
            connection.invoke(""SendMessage"", args).catch(function (err) {
                return console.error(err.toString());
            });

            element.value = """";

            event.preventDefault();
        }
    });

    //Receive Command-Related Message
    connection.on(""ReceiveCommandMessage"", function (args) {
        appendCommandMessage(args.color, args.message);
    });

    //Send Command
    document.getElementById(""command-input"").addEventListener(""keyup"", function (event) {
        if (event.keyCode == 13) {
            var element = document.getElementById(""command-input"");
            var text = element.value;

            var args = {
                GroupID: viewmodel.GroupID,
                ");
            WriteLiteral(@"SenderID: viewmodel.UserID,
                SenderRank: viewmodel.Rank,
                Text: text
            };
            connection.invoke(""ProcessCommand"", args).catch(function (err) {
                return console.error(err.toString());
            });

            element.value = """";

            event.preventDefault();
        }
    });

    //On User Connect
    connection.on(""UserConnected"", function (args) {
        if (args.userID != parseInt(viewmodel.UserID)) {
            userConnected(args.userID, args.userName, args.userRankName);
        }
    });

    //On User Disconnect
    connection.on(""UserDisconnected"", function (args) {
        userDisconnected(args.userID);
    });

    //On Receive Rank Update
    connection.on(""UpdateRank"", function (args) {
        viewmodel.Rank = args.newRank;
    });
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Chat_V2.Pages.ChatModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Chat_V2.Pages.ChatModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Chat_V2.Pages.ChatModel>)PageContext?.ViewData;
        public Chat_V2.Pages.ChatModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
